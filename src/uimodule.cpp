/**
 * Author: Frano Petric
 * Version: 0.9
 * Date: 2.4.2014.
 */

#include "uimodule.hpp"
#include <iostream>
#include <fstream>
#include <alvalue/alvalue.h>
#include <alcommon/alproxy.h>
#include <alcommon/albroker.h>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/thread.hpp>
#include <boost/lambda/lambda.hpp>
#include <qi/log.hpp>
#include <althread/alcriticalsection.h>

struct Interface::Impl {
    boost::shared_ptr<AL::ALMemoryProxy> memoryProxy;
    boost::shared_ptr<AL::ALAudioPlayerProxy> playerProxy;

    Interface &module;

    boost::shared_ptr<AL::ALMutex> fCallbackMutex;

    std::ofstream outputFile;


    /** Struct constructor */
    Impl(Interface &mod) : module(mod), fCallbackMutex(AL::ALMutex::createALMutex()) {
        try {
            memoryProxy = boost::shared_ptr<AL::ALMemoryProxy>(new AL::ALMemoryProxy(mod.getParentBroker()));
            playerProxy = boost::shared_ptr<AL::ALAudioPlayerProxy>(new AL::ALAudioPlayerProxy(mod.getParentBroker()));
        }
        catch (const AL::ALError& e) {
            qiLogError("Interface") << "Error creating proxy to ALMemory" << e.toString() << std::endl;
        }
        /** Declare events that are generated by this module */
        memoryProxy->declareEvent("StartSession");
        memoryProxy->declareEvent("ChildCalled");

        /** Subscribe to event FronTactilTouched */
        memoryProxy->subscribeToEvent("FrontTactilTouched", "Interface", "onTactilTouched");
    }
};

Interface::Interface(boost::shared_ptr<AL::ALBroker> pBroker, const std::string& pName) :  AL::ALModule(pBroker, pName) {

    setModuleDescription("User interface module");

    functionName("onTactilTouched", getName(), "ShitMethod");
    BIND_METHOD(Interface::onTactilTouched);

    functionName("callChild", getName(), "Other shit method");
    BIND_METHOD(Interface::callChild);

    functionName("endSession", getName(), "Yet another shit method");
    BIND_METHOD(Interface::endSession);
}

Interface::~Interface() {
    /** Destructor code */
    /** Do cleanup */
}

void Interface::init() {
    /** Overriding ALModule::init */
    try {
        impl = boost::shared_ptr<Impl>(new Impl(*this));
        AL::ALModule::init();
    }
    catch (const AL::ALError& e) {
        qiLogError("Interface") << e.what() << std::endl;
    }
    qiLogVerbose("Interface") << "Interface initialized" << std::endl;
}

void Interface::onTactilTouched() {
    /**
      * As long as this is defined, the code is thread-safe.
      */

    AL::ALCriticalSection section(impl->fCallbackMutex);
    impl->memoryProxy->unsubscribeToEvent("FrontTactilTouched", "Interface");
    qiLogWarning("Interface") << "Starting session" << std::endl;
    impl->memoryProxy->subscribeToEvent("CallChild", "Interface", "callChild");
    impl->memoryProxy->subscribeToEvent("EndSession", "Interface", "endSession");
    /** Raise event that the session should start */
    impl->memoryProxy->raiseEvent("StartSession", AL::ALValue(1));

}

void Interface::callChild(const std::string &key, const AL::ALValue &value, const AL::ALValue &msg) {
    /** Thread safety */
    AL::ALCriticalSection section(impl->fCallbackMutex);
    impl->memoryProxy->unsubscribeToEvent("CallChild", "Interface");
    qiLogWarning("Interface") << "Reacting to callChild event" << std::endl;
    /** Reproduce the sound using ALAudioDevice proxy */
    if( (int)value == 1 ) {
        /** Call child with name */
        qiLogVerbose("Interface") << "Calling with name\n";
        //impl->playerProxy->playFile("/home/nao/naoqi/sounds/name.wav");
    }
    else if ( (int)value == 2 ) {
        /** Use special phrase */
        qiLogVerbose("Interface") << "Calling with special phrase\n";
        //impl->playerProxy->playFile("(home/nao/naoqi/sounds/phrase.wav");
    }
    /** Raise event that child is called */
    impl->memoryProxy->raiseEvent("ChildCalled", value);

    /** Subscribe to CallChild event again */
    impl->memoryProxy->subscribeToEvent("CallChild", "Interface", "callChild");


}

void Interface::endSession() {
    /** Lolololo comment */
    qiLogWarning("Interface") << "Subscribing back to FrontTactilTouched" << std::endl;
    try {
        impl->memoryProxy->unsubscribeToEvent("CallChild", "Interface");
        impl->memoryProxy->unsubscribeToEvent("EndSession", "Interface");
        impl->memoryProxy->subscribeToEvent("FrontTactilTouched", "Interface", "onTactilTouched");
    }
    catch (const AL::ALError& e) {
        qiLogError("Interface") << "Error managing events while reseting" << e.toString() << std::endl;
    }
}
